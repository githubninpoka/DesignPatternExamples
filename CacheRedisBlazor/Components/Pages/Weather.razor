@page "/weather"

@using CacheRedisBlazor.Extensions

@inject IDistributedCache cache

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (loadLocation is not null){

    <p>@loadLocation</p>
}
    <button type="button" @onclick="LoadForecast">Get</button>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string loadLocation = "";
    private string isCacheData = "";

    protected override async Task OnInitializedAsync()
    {
        forecasts = await GetForecastsAsync();
    }

    private static async Task<WeatherForecast[]?> GetForecastsAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(2500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        var forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
        return forecasts;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private async Task LoadForecast()
    {
        forecasts = null;
        loadLocation = "";
        string recordKey = "WeatherForecast_" + DateTime.Now.ToString("yyyyMMdd_hhmm");
        forecasts = await cache.GetRecordAsync<WeatherForecast[]>(recordKey);

        if (forecasts is null){
            forecasts = await GetForecastsAsync();
            loadLocation = $"Loaded from API at {DateTime.Now}";
            isCacheData = "";
            await cache.SetRecordAsync(recordKey, forecasts);
        }
        else{
            loadLocation = $"Loaded from the cache at {DateTime.Now}";
            isCacheData = "text-danger";
        }
    }
}
